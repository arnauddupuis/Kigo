# Types are the types provided by this template. In this case we have:
# sql_table: this is the template for a classic SQL table.
# sql_script: a SQL script (like a database init script or triggers)
# This is a semi-colon separated list
types=sql_table;sql_script
type:sql_table=db_table
type:sql_script=controller

# output:root is where kigo will put the generated files. You can generate a proper hierarchy by using the output:<specific> notation.
# Generic output root dir for this template
output:root=generated_sql
# Specific output directories.
# By default if a type doesn't have an output directory defined, kigo will generate a rule that will have the following form: output:<type>=/<type>.
output:sql_table=/tables
output:sql_script=/scripts
# If you want/need everything to be put in the same directory just write rules that looks like that: output:<type>=/ (for each types).

# Extra includes you want to put in all generated files (you want to use that after thinking twice to the implications...).
extra_includes=

# Here are the description of the template architecture (if you copy this template to create a new one, this part is not needed as this template is only filled with default values).
sql_table:main_template=table.ktpl
sql_script:main_template=script.ktpl


# Variables prefixed by "type:" represent the type adaptation.
type_translation:k_bool=boolean
type_translation:k_int=int
type_translation:k_float=float(4,2)
type_translation:k_string=varchar(200)
type_translation:k_char=char
type_translation:k_text=text
type_translation:k_date=date
type_translation:k_datetime=datetime