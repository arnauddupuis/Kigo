# Types are the types provided by this template. In this case we have:
# class: this is the template for a basic PHP class that accesses data in a SQL database.
# script: a PHP script that does something (anything)
# api: the frontend web API
types=class,script,api

# A template can require another template to work as intended. The "use" keyword tell kigo this information. As types, it is a coma separated list.
use=SQL

# All generated files can have a prefix to help identify them (but it is obviously not mandatory)
prefix:class=C
prefix:script=s_
prefix:api=api_

# include for a specific type
# include:WebConfig=WebConfig.php

# output is where kigo will put the generated files. You can generate a proper hierarchy by using the output:<specific> notation.
# Generic output root dir for this template
output=generated_php
# Specific output directories
output:class=/*__template:output__*//class
output:script=/*__template:output__*//scripts
output:api=/*__template:output__*//api

# Extra includes you want to put in all generated files (you want to use that after thinking twice to the implications...).
extra_includes=

# Here are the description of the template architecture (if you copy this template to create a new one, this part is not needed as this template is only filled with default values).
class:main_template=class.cgtpl
class:getter=getter.cgtpl
class:setter=setter.cgtpl
script:main_template=script.cgtpl
api:main_template=api.cgtpl

# Variables prefixed by "k_" represents the keywords language adaptation
k_inheritance=extends
