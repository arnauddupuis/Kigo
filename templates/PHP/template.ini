# Types are the types provided by this template. In this case we have:
# php_class: this is the template for a basic PHP class that accesses data in a SQL database.
# php_script: a PHP script that does something (anything)
# php_api: the frontend web API
# This is a semi-colon separated list
types=php_class;php_script;php_api
type:php_class=class
type:php_script=controller
type:php_api=api

# The default suffix added for automatic includes (like parents).
default:file_suffix=.php

# A template can require another template to work as intended. The "use" keyword tell kigo this information. As types, it is a semi-colon separated list.
use=SQL

# All generated files can have a prefix to help identify them (but it is obviously not mandatory)
prefix:php_class=C
prefix:php_script=s_
prefix:php_api=api_

# include for a specific type
# include:WebConfig=WebConfig.php

# output:root is where kigo will put the generated files. You can generate a proper hierarchy by using the output:<specific> notation.
# Generic output root dir for this template
output:root=generated_php
# Specific output directories. They are all relative to the output:root directory. If they are left empty or not defined the following default values applies :
# output:class=/class
# output:script=/script
# output:api=/api
# By default if a type doesn't have an output directory defined, kigo will generate a rule that will have the following form: output:<type>=/<type>.
output:php_class=/class
output:php_script=/scripts
output:php_api=/api
# If you want/need everything to be put in the same directory just write rules that looks like that: output:<type>=/ (for each types).

# Extra includes you want to put in all generated files (you want to use that after thinking twice to the implications...).
extra_includes=

# Here are the description of the template architecture (if you copy this template to create a new one, this part is not needed as this template is only filled with default values).
php_class:main_template=class.ktpl
php_class:getter=getter.ktpl
php_class:setter=setter.ktpl
php_script:main_template=script.ktpl
php_api:main_template=api.ktpl

# Variables prefixed by "keyword:" represents the keywords language adaptation
keyword:inheritance=extends

# Variables prefixed by "code:" represents the code specific adaptation
code:function_parameters_separator=,

# Variables prefixed by "type:" represent the type adaptation.
# type_translation:k_bool=bool
# type_translation:k_int=int
# type_translation:k_string=string
# type_translation:k_char=char*
